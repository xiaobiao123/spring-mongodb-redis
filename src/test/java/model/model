Visitor访问者设计模式


Interpreter解释器设计模式的应用场景：
 * 在软件构建过程中，若果某一特定领域的问题比较复杂，类似的模式不断重复出现，
 * 如果使用普通的编程方式来实现将面临非常频繁的变化。在这种情况下，将特定领
 * 域的问题表达为某种语法规则下的句子，再构建一个解释器来解释这样的句子，从而达到解决问题的目的。

解释器模式属于行为模式，Gof是这样定义的：给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。
解释器模式需要解决的是，如果一种特定类型的问题发生的频率足够高，那么可能就值得将该问题的各个实例表述为一个简单语言中的句子。
这样就可以构建一个解释器，该解释器通过解释这些句子来解决该问题。

实例应用：正则表达式

单一职责原则的定义是：应该有且仅有一个原因引起类的变更

单一职责原则
要求一个接口或类只有一个原因引起变化，也就是一个接口或类只有一个职责
好处：1、类的复杂性降低，实现什么职责都有清晰明确的定义；
     2、可读性提高，复杂性降低，那当然可读性提高了
     3、可维护性提高，可读性提高，那当然更容易维护了；
     4、变更引起的风险降低，变更是必不可少的，如果接口的单一职责做得好，一个接口修
       改只对相应的实现类有影响，对其他的接口无影响，这对系统的扩展性、维护性都有非常大
       的帮助。
单一职责原则提出了一个编写程序的标准，用“职责”或“变化原因”来衡量接口或
类设计得是否优良，但是“职责”和“变化原因”都是不可度量的，因项目而异，因环境而异

里氏替换原则：所有引用基类的地方必须能透明地使用其子类的对象
优点：代码共享，减少创建类的工作量，每个子类都拥有父类的方法和属性；
     提高代码的重用性；
     子类可以形似父类，但又异于父类
     提高代码的可扩展性，实现父类的方法就可以“为所欲为”了，君不见很多开源框架的
     扩展接口都是通过继承父类来完成的；
     提高产品或项目的开放性。
缺点：继承是侵入性的。只要继承，就必须拥有父类的所有属性和方法
     降低代码的灵活性
     增强了耦合性。当父类的常量、变量和方法被修改时，需要考虑子类的修改，而且在
     缺乏规范的环境下，这种修改可能带来非常糟糕的结果——大段的代码需要重构