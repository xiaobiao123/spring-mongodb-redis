    一个http请求到达服务器，被DispatcherServlet接收。DispatcherServlet将请求委派给合适的处理器Controller，
    此时处理控制权到达Controller对象。Controller内部完成请求的数据模型的创建和业务逻辑的处理，然后再将填充了数据后的模型
    即model和控制权一并交还给DispatcherServlet，委派DispatcherServlet来渲染响应。DispatcherServlet再将这些数据和
    适当的数据模版视图结合，向Response输出响应。
1、springMVC初始化过程分为两个阶段，ContextLoaderListener初始化父容器；DispatcherServlet初始化子容器
    1.1、ContextLoaderListener 实现ServletContextListener-->contextInitialized()
        通过initWebApplicationContext()-refresh()方法创建父容器

    1.2、DispatcherServlet
         DispatcherServlet 继承 FrameworkServlet；FrameworkServlet继承HttpServletBean；
         HttpServletBean继承HttpServlet;
         FrameworkServlet重实现HttpServlet的service/doGet/doPost方法调用DispatcherServlet中的
         doService，doDispatch，经过HandlerExecutionChain，HandlerAdapter，ModelAndView


2、DispatcherServlet中使用的特殊的Bean
    DispatcherServlet默认使用WebApplicationContext作为上下文，因此我们来看一下该上下文中有哪些特殊的Bean：
    1、Controller：处理器/页面控制器，做的是MVC中的C的事情，但控制逻辑转移到前端控制器了，用于对请求进行处理；
    2、HandlerMapping：请求到处理器的映射，如果映射成功返回一个HandlerExecutionChain对象（包含一个Handler处理器（页面控制器）对象、
       多个HandlerInterceptor拦截器）对象；如BeanNameUrlHandlerMapping将URL与Bean名字映射，映射成功的Bean就是此处的处理器；
    3、HandlerAdapter：HandlerAdapter将会把处理器包装为适配器，从而支持多种类型的处理器，即适配器设计模式的应用，从而很容易支持很多类型
       的处理器；如SimpleControllerHandlerAdapter将对实现了Controller接口的Bean进行适配，并且掉处理器的handleRequest方法进行功能处理；
    4、ViewResolver：ViewResolver将把逻辑视图名解析为具体的View，通过这种策略模式，很容易更换其他视图技术；
      如InternalResourceViewResolver将逻辑视图名映射为jsp视图；
    5、LocalResover：本地化解析，因为Spring支持国际化，因此LocalResover解析客户端的Locale信息从而方便进行国际化；
    6、ThemeResovler：主题解析，通过它来实现一个页面多套风格，即常见的类似于软件皮肤效果；
    7、MultipartResolver：文件上传解析，用于支持文件上传；
    8、HandlerExceptionResolver：处理器异常解析，可以将异常映射到相应的统一错误界面，从而显示用户友好的界面（而不是给用户看到具体的错误信息）；
    9、RequestToViewNameTranslator：当处理器没有返回逻辑视图名等相关信息时，自动将请求URL映射为逻辑视图名；
    10、FlashMapManager：用于管理FlashMap的策略接口，FlashMap用于存储一个请求的输出，当进入另一个请求时作为该请求的输入，通常用于重定向场景，
        后边会细述。

      //初始化文件上传处理类  解析器
          initMultipartResolver(context);
      //初始化本地化Resolver  http://blog.csdn.net/rj042/article/details/23354225
          initLocaleResolver(context);
      //初始化主题Resolver
          initThemeResolver(context);
      //初始化一些个与处理的HandlerMappings
          initHandlerMappings(context);  HttpRequestHandlerAdapter  SimpleControllerHandlerAdapter
          AnnotationMethonHanderAdapter
          initHandlerAdapters(context);

      //初始化异常处理的handler
          initHandlerExceptionResolvers(context);
          AnnotationMethodHandlerExceptionResolver
          ResponseStatusExceptionResolver
          DefaultHandlerException
      //初始化请求路径转换为ViewName 的Translator
          initRequestToViewNameTranslator(context);  DefaultRequestToViewNameTranslator
      //初始化ViewResolvers 这个就是针对视图处理的Resolvers 比如jsp处理Resolvers 或者freemarker处理Resolvers
          initViewResolvers(context);
      //初始化 主要管理flashmap，重定向数据保存   比如RedirectAttributes 的属性会放到这个里面，默认使用的是SessionFlashMapManager
          initFlashMapManager(context);

    前端控制器（DispatcherServlet）、
    请求到处理器映射（HandlerMapping）、
    处理器适配器（HandlerAdapter）、
    视图解析器（ViewResolver）、
    处理器或页面控制器（Controller）、
    验证器（   Validator）、
    命令对象（Command  请求参数绑定到的对象就叫命令对象）、
    表单对象（Form Object 提供给表单展示和提交到的对象就叫表单对象）。


     doDispatch方法：处理拦截，转发请求，并绘制VIEW

### doDispatch()中的处理逻辑大致分以下几个步骤：
1.根据request得到相应的处理器
 HandlerExecutionChain  mappedhandler = getHandler(request)
2.调用注册的所有拦截器的prehandle方法
if (!mappedHandler.applyPreHandle(processedRequest, response))

3.调用处理器

//这里使用了adapter模式
HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());
ModelAndView mv = ha.handle(processedRequest, response, mappedHandler.getHandler());

4.调用注册的所有拦截器的posthandle方法
mappedHandler.applyPostHandle(processedRequest, response, mv);

5.绘制mv
render(mv, request, response);